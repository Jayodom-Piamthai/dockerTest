# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  php_apache_front:
    build:
      dockerfile: php_apache_front.Dockerfile
      context: php_apache_front/
    ports:
      - 33311:80
  node_front:
    build: 
      dockerfile: node_front.Dockerfile
      context: node_front/
    ports:
      - 33312:33312
  # php_back:
  #   build:
  #     dockerfile: php_back.Dockerfile
  #     context: php_back/
  sql_database:
    image:
  mongo_database:
    build:
      dockerfile: mongo_database.Dockerfile
      context: mongo_database/
  # prisma_database:
  #   build:
  #     dockerfile: prisma_database.Dockerfile
  #     context: prisma_database
  #   image: prismagraphql/prisma:__LATEST_PRISMA_VERSION__
  #   restart: always
  #   ports:
  #     - '4466:4466'
  #   environment:
  #     PRISMA_CONFIG: |
  #       managementApiSecret: __YOUR_MANAGEMENT_API_SECRET__
  #       port: __YOUR_PRISMA_SERVER_PORT__
  #       databases:
  #         default:
  #           connector: __YOUR_DATABASE_CONNECTOR__
  #           host: __YOUR_DATABASE_HOST__
  #           port: __YOUR_DATABASE_PORT__
  #           user: __YOUR_DATABASE_USER__
  #           password: __YOUR_DATABASE_PASSWORD__
  #           connectionLimit: __YOUR_CONNECTION_LIMIT__
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

